
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>
#include <time.h>

#include "libRUDP-constants.h"
#include "libRUDP-generic.h"

int chooseFile(char ** fileList, int fileListSize, char * fileRequested) {
	int backtomenu = 0;
	int fileFound = 0;
	int i = 0;
	if(fileListSize==0) {	
		printf("\nSorry, but you have to request the list of file before...\n");
		printf(	"...press any char to continue ");
		fflush(stdout);
		scanf ("%s", &fileRequested[0]);
		backtomenu=1;
	} else {
		backtomenu=0;
		i=0;
		fileFound=0;
	}
	while(!backtomenu && !fileFound) {
		printf("Please, type the file name, or press \"..\" to go back to menu\n");
		fflush(stdout);
		i=0;
		scanf ("%s", fileRequested);
		if(fileRequested[0]=='.' && fileRequested[1]=='.') {
			backtomenu=1;
		} else {
			// find fileRequested
			while (i<fileListSize && !fileFound) {
				//printf("%s==%s\n",fileRequested,fileList[i]);
				if(strcmp(fileRequested, fileList[i]) == 0) {
					fileFound=1;
					printf("Ok, file found\n"); fflush(stdout);
				}
				i++;
			}
		}
	}
	return fileFound;
}

void getMenu(int err, char ** cmdList, int cmdPos) {
	  puts("");
	  puts("                                  __ ");
	  puts("    /\\    /\\  _____  _ ___   __  / /  ");
	  puts("   /  \\  /  \\ \\  _ \\ \\ | _ \\ \\ \\ \\ \\ 	  ");
	  puts("  / /\\ \\/ /\\ \\ \\  __| \\ \\ \\ \\ \\ \\_\\ \\	  	          ");
	  puts(" / /  \\__/  \\_\\ \\____\\ \\_\\ \\_\\ \\_____\\");
	printf(" \\ \\ >~~~~~[L]ist~of~files~~~~~~ ~~ ~ ~ ~  ~| %s\n",cmdList[(cmdPos-1+8)%8] );
  printf(" / / >~~~~~[G]et~a~file~~~~~~~~ ~~~ ~~ ~  ~ | %s\n",cmdList[(cmdPos-2+8)%8] );
  printf(" \\ \\ >~~~~~[P]ut~a~file~~~~~~~~~~~~ ~~ ~ ~  | %s\n",cmdList[(cmdPos-3+8)%8] );
  printf(" / / >~~~~~[Q]uit~~~~~~~~~~~~~~~ ~~~ ~ ~  ~ | %s\n",cmdList[(cmdPos-4+8)%8] );
	printf(" \\ \\____________________________            | %s\n",cmdList[(cmdPos-5+8)%8] );
	if (err)
	  puts("  \\____________________________/ Command Not Found, Retry");
	else
	  puts("  \\____________________________/ type your command");
	fflush(stdout);
}

void srvr_logManager() { // whoiam=0->server, whoiam=1->client

	/* Inizialize Strctures */
	signal(SIGINT, closing_clnt_srvr_LogManager);
	FILE * logFile = 0;
	FILE * usrsFile = 0;
	char * logfilename;
	logfilename = LOG_SERVER;
	logFile = fopen(logfilename, "a"); // File where Log
	usrsFile = fopen("log_RUDP_server_users.log", "a");
	if(logFile<0) { perror("\nLOG: Error in Open logfile"); exit(1);}
	if(usrsFile<0) { perror("\nLOG: Error in Open usrsLogFile"); exit(1);}
	char * buffer = malloc(LOG_SIZE*sizeof(char)); // ???? DO WE NEED IT?
	int nread=0;
	time_t timer;
	timer=time(NULL);
	int fifo_TOlog;
	int i =0;
	int endPrint = 1;

	/* Sync Fifo with Log Thread */
	char * buf_LOG = malloc(LOG_SIZE*sizeof(char));
	fifo_TOlog = open( SERVER_FIFO_TO_LOG, O_RDONLY );
	if(fifo_TOlog<0) { perror("CLIENT-LOG: Cannot open fifo_TOlog\n"); exit(1); }

	/*...*/
	fputs("\n----------------------------------------"
				"\n--------NEW---EXECUTION--> ", logFile); fputs(asctime(localtime(&timer)), logFile);
	fflush(logFile);
	fputs("\n----------------------------------------"
				"\n--------NEW---EXECUTION--> ", usrsFile); fputs(asctime(localtime(&timer)), usrsFile);
	fflush(usrsFile);
	int WORKING = 1;
	int DEBV = 0;
	int LOGV = 0;

	/* Start Routine Log Manager */
	while(WORKING) {
		memset(buf_LOG, 0, LOG_SIZE); // TODO Useless??
		nread = read(fifo_TOlog, buf_LOG, LOG_SIZE);
		if(nread<0) { 
			perror("LOG: Read Error\n"); exit(1);
		}
		if( strncmp(buf_LOG,"USR",3) == 0) {
			timer=time(NULL);
			fputs(asctime(localtime(&timer)), usrsFile);
			fputs(buf_LOG+3, usrsFile);
			fflush(usrsFile);
		} else {
			memcpy(&DEBV, buf_LOG, sizeof(int));
			memcpy(&LOGV, buf_LOG+4, sizeof(int));
			if(DEBUG_SERVER>=DEBV) {
				fputs(buf_LOG+8, stdout);
				fflush(stdout);
			}
			if(LOG_TO_FILE>=LOGV) {
				fputs(buf_LOG+8, logFile);
				fflush(logFile);
			}
		}
	}
}

void clnt_logManager() { // whoiam=0->server, whoiam=1->client

	/* Inizialize Strctures */
		signal(SIGINT, closing_clnt_srvr_LogManager);
		FILE * logFile = 0;
		char * logfilename;
		logfilename = LOG_CLIENT;
		logFile = fopen(logfilename, "a"); // File where Log
		if(logFile<0) { perror("\nLOG: Error in Open logfile"); exit(1);}
		char * buffer = malloc(LOG_SIZE*sizeof(char)); // ???? DO WE NEED IT?
		int nread=0;
		time_t timer;
		timer=time(NULL);
		int fifo_TOlog;
		int i =0;
		int endPrint = 1;

	/* Sync Fifo with Log Thread */
		char * buf_LOG = malloc(LOG_SIZE*sizeof(char));
		fifo_TOlog = open( CLIENT_FIFO_TO_LOG, O_RDONLY );
		if(fifo_TOlog<0) { perror("CLIENT-LOG: Cannot open fifo_TOlog\n"); exit(1); }

		/*...*/
		fputs("\n----------------------------------------"
					"\n--------NEW---EXECUTION--> ", logFile); fputs(asctime(localtime(&timer)), logFile);
		fflush(logFile);

		int WORKING = 1;
		int DEBV = 0;
		int LOGV = 0;

	/* Start Routine Log Manager */
		while(WORKING) {
			memset(buf_LOG, 0, LOG_SIZE); // TODO Useless??
			nread = read(fifo_TOlog, buf_LOG, LOG_SIZE);
			if(nread<0) { 
				perror("LOG: Read Error\n"); exit(1);
			}
			fputs(buf_LOG, logFile);
			fflush(logFile); // Do i need it??
			
		}
}

void logit(char * buffer, int fifo_TOlog, int size, int debugv, int flogv) {
	int debug = debugv;
	int flog = flogv;
	memcpy(buffer, &debug, sizeof(int));
	memcpy(buffer+4, &flog, sizeof(int));
	write (fifo_TOlog, buffer, size );
}


void closing_clnt_srvr_LogManager() {
	printf("\nClosing LogManager... '%d' ", getpid());
	fcloseall();
	exit(2);
}

void closing_client() {
	printf("\nClosing Client... '%d' ", getpid());
	fcloseall();
	unlink(CLIENT_FIFO_TO_LOG);
	exit(2);
}

void closing_server() {
	printf("\nClosing Server... '%d' ", getpid());
	fcloseall();
	unlink(SERVER_FIFO_TO_LOG);
	exit(2);
}

long fileSize(char * FileName) {
  long lSize;
	FILE * pFile;
  if ( !( pFile = fopen ( FileName , "rb" ) ) ) {
    printf("\nFileSize Calcolate: Error to open File!! %s", FileName);fflush(stdout); exit (1);
  }
  fseek (pFile , 0 , SEEK_END);
  lSize = ftell (pFile);
  rewind (pFile);
	fclose(pFile);
	return lSize;
}




